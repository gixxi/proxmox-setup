#!/bin/bash

# Email Configuration for Hardware Detection Reports
# This script configures SMTP settings for sending hardware reports

# SMTP Configuration
# Edit these settings according to your email provider

# Gmail Configuration (Recommended)
SMTP_SERVER="smtp.gmail.com"
SMTP_PORT="587"
EMAIL_FROM="support@rocklog.ch"
EMAIL_TO="support@rocklog.ch"
EMAIL_PASSWORD="your-app-password"
USE_TLS="true"

# Alternative Email Providers

# Outlook/Hotmail
# SMTP_SERVER="smtp-mail.outlook.com"
# SMTP_PORT="587"
# EMAIL_FROM="your-email@outlook.com"
# EMAIL_TO="your-email@outlook.com"
# EMAIL_PASSWORD="your-password"
# USE_TLS="true"

# Yahoo
# SMTP_SERVER="smtp.mail.yahoo.com"
# SMTP_PORT="587"
# EMAIL_FROM="your-email@yahoo.com"
# EMAIL_TO="your-email@yahoo.com"
# EMAIL_PASSWORD="your-app-password"
# USE_TLS="true"

# Custom SMTP Server
# SMTP_SERVER="your-smtp-server.com"
# SMTP_PORT="587"
# EMAIL_FROM="your-email@yourdomain.com"
# EMAIL_TO="your-email@yourdomain.com"
# EMAIL_PASSWORD="your-password"
# USE_TLS="true"

# Email Subject Template
EMAIL_SUBJECT_TEMPLATE="Hardware Detection Report - {HOSTNAME} - {DATE}"

# Email Body Template
EMAIL_BODY_TEMPLATE="
Hardware Detection Report

Hostname: {HOSTNAME}
Date: {DATE}
Detection Time: {DETECTION_TIME} seconds

{REPORT_CONTENT}

---
This report was automatically generated by the Debian Cloud-Init Hardware Detection System.
"

# Function to test email configuration
test_email_config() {
    echo "Testing email configuration..."
    echo "SMTP Server: $SMTP_SERVER:$SMTP_PORT"
    echo "From: $EMAIL_FROM"
    echo "To: $EMAIL_TO"
    echo "TLS: $USE_TLS"
    echo ""
    
    # Test network connectivity
    if ping -c 1 "$SMTP_SERVER" >/dev/null 2>&1; then
        echo "✓ SMTP server is reachable"
    else
        echo "✗ Cannot reach SMTP server"
        return 1
    fi
    
    # Test email sending (if curl is available)
    if command -v curl >/dev/null 2>&1; then
        local test_email="From: $EMAIL_FROM
To: $EMAIL_TO
Subject: Hardware Detection Test
Content-Type: text/plain; charset=UTF-8

This is a test email from the hardware detection system.
Date: $(date)
Hostname: $(hostname)

If you receive this email, the configuration is working correctly."

        if curl --mail-from "$EMAIL_FROM" \
                --mail-rcpt "$EMAIL_TO" \
                --upload-file <(echo "$test_email") \
                --ssl-reqd \
                --user "$EMAIL_FROM:$EMAIL_PASSWORD" \
                "smtp://$SMTP_SERVER:$SMTP_PORT" >/dev/null 2>&1; then
            echo "✓ Test email sent successfully"
            echo "Check your inbox for the test email"
        else
            echo "✗ Failed to send test email"
            echo "Check your SMTP settings and credentials"
            return 1
        fi
    else
        echo "⚠ curl not available, cannot test email sending"
    fi
}

# Function to send email
send_email() {
    local subject="$1"
    local body="$2"
    
    if command -v curl >/dev/null 2>&1; then
        local email_data="From: $EMAIL_FROM
To: $EMAIL_TO
Subject: $subject
Content-Type: text/plain; charset=UTF-8

$body"
        
        if curl --mail-from "$EMAIL_FROM" \
                --mail-rcpt "$EMAIL_TO" \
                --upload-file <(echo "$email_data") \
                --ssl-reqd \
                --user "$EMAIL_FROM:$EMAIL_PASSWORD" \
                "smtp://$SMTP_SERVER:$SMTP_PORT" >/dev/null 2>&1; then
            echo "✓ Email sent successfully"
            return 0
        else
            echo "✗ Failed to send email"
            return 1
        fi
    else
        echo "✗ curl not available, cannot send email"
        return 1
    fi
}

# Function to format email subject
format_email_subject() {
    local hostname="$1"
    local date="$2"
    
    local subject="$EMAIL_SUBJECT_TEMPLATE"
    subject="${subject//\{HOSTNAME\}/$hostname}"
    subject="${subject//\{DATE\}/$date}"
    
    echo "$subject"
}

# Function to format email body
format_email_body() {
    local hostname="$1"
    local date="$2"
    local detection_time="$3"
    local report_content="$4"
    
    local body="$EMAIL_BODY_TEMPLATE"
    body="${body//\{HOSTNAME\}/$hostname}"
    body="${body//\{DATE\}/$date}"
    body="${body//\{DETECTION_TIME\}/$detection_time}"
    body="${body//\{REPORT_CONTENT\}/$report_content}"
    
    echo "$body"
}

# Gmail Setup Instructions
show_gmail_setup() {
    echo "=== Gmail Setup Instructions ==="
    echo ""
    echo "To use Gmail for sending hardware reports:"
    echo ""
    echo "1. Enable 2-Factor Authentication:"
    echo "   - Go to your Google Account settings"
    echo "   - Enable 2-Step Verification"
    echo ""
    echo "2. Generate an App Password:"
    echo "   - Go to Security settings"
    echo "   - Under 'Signing in to Google', select 'App passwords'"
    echo "   - Generate a new app password for 'Mail'"
    echo "   - Use this password in EMAIL_PASSWORD"
    echo ""
    echo "3. Update this configuration file:"
    echo "   EMAIL_FROM=\"your-email@gmail.com\""
    echo "   EMAIL_PASSWORD=\"your-16-character-app-password\""
    echo ""
    echo "4. Test the configuration:"
    echo "   ./email_config.sh test"
    echo ""
}

# Main execution
case "${1:-}" in
    "test")
        test_email_config
        ;;
    "setup")
        show_gmail_setup
        ;;
    "send")
        if [ $# -lt 3 ]; then
            echo "Usage: $0 send <subject> <body_file>"
            exit 1
        fi
        local subject="$2"
        local body_file="$3"
        if [ -f "$body_file" ]; then
            local body=$(cat "$body_file")
            send_email "$subject" "$body"
        else
            echo "Error: Body file not found: $body_file"
            exit 1
        fi
        ;;
    *)
        echo "Email Configuration for Hardware Detection"
        echo ""
        echo "Usage:"
        echo "  $0 test     - Test email configuration"
        echo "  $0 setup    - Show Gmail setup instructions"
        echo "  $0 send <subject> <body_file> - Send email"
        echo ""
        echo "Current Configuration:"
        echo "  SMTP Server: $SMTP_SERVER:$SMTP_PORT"
        echo "  From: $EMAIL_FROM"
        echo "  To: $EMAIL_TO"
        echo "  TLS: $USE_TLS"
        echo ""
        echo "To configure:"
        echo "  1. Edit this file and update the settings"
        echo "  2. Run '$0 test' to verify configuration"
        echo "  3. Run '$0 setup' for Gmail setup instructions"
        ;;
esac 
