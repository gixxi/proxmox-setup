#!/bin/bash

# PXE TFTP Server dnsmasq Configuration Script
# This script configures dnsmasq for DHCP and PXE boot

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "INFO")
            echo -e "${BLUE}[INFO]${NC} $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[SUCCESS]${NC} $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
    esac
}

# Check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        print_status "ERROR" "This script must be run as root"
        echo "Use: sudo $0"
        exit 1
    fi
}

# Load network configuration
load_network_config() {
    if [ -f "network_config.env" ]; then
        print_status "INFO" "Loading network configuration..."
        source network_config.env
    else
        print_status "ERROR" "Network configuration not found"
        echo "Please run ./configure_network.sh first"
        exit 1
    fi
}

# Backup existing dnsmasq configuration
backup_config() {
    print_status "INFO" "Backing up existing dnsmasq configuration..."
    
    if [ -f /etc/dnsmasq.conf ]; then
        cp /etc/dnsmasq.conf /etc/dnsmasq.conf.backup.$(date +%Y%m%d_%H%M%S)
        print_status "SUCCESS" "Backup created: /etc/dnsmasq.conf.backup.*"
    fi
}

# Create dnsmasq configuration
create_dnsmasq_config() {
    print_status "INFO" "Creating dnsmasq configuration..."
    
    cat > /etc/dnsmasq.conf << EOF
# PXE TFTP Server Configuration
# Generated by PXE setup script

# Network interface to listen on
interface=$PXE_INTERFACE

# DHCP configuration
dhcp-range=$DHCP_START,$DHCP_END,24h
dhcp-option=3,$PXE_IP
dhcp-option=6,$PXE_IP

# PXE boot configuration
dhcp-boot=pxelinux.0,$PXE_IP
enable-tftp
tftp-root=/var/lib/tftpboot

# DNS configuration (optional)
port=53
domain-needed
bogus-priv
no-resolv
no-poll

# Logging
log-queries
log-dhcp

# Additional options
dhcp-leasefile=/var/lib/misc/dnsmasq.leases
dhcp-authoritative
EOF
    
    print_status "SUCCESS" "dnsmasq configuration created"
}

# Configure firewall
configure_firewall() {
    print_status "INFO" "Configuring firewall..."
    
    # Check if firewalld is running
    if systemctl is-active --quiet firewalld; then
        print_status "INFO" "Configuring firewalld..."
        
        # Add DHCP and TFTP services
        firewall-cmd --permanent --add-service=dhcp
        firewall-cmd --permanent --add-service=tftp
        
        # Add DNS service if needed
        firewall-cmd --permanent --add-service=dns
        
        # Reload firewall
        firewall-cmd --reload
        
        print_status "SUCCESS" "Firewall configured"
        
    elif command -v ufw >/dev/null 2>&1; then
        print_status "INFO" "Configuring UFW..."
        
        # Allow DHCP and TFTP
        ufw allow 67/udp
        ufw allow 69/udp
        ufw allow 53/tcp
        ufw allow 53/udp
        
        print_status "SUCCESS" "UFW configured"
        
    else
        print_status "WARNING" "No firewall detected or configured"
        print_status "INFO" "Please ensure ports 67/UDP, 69/UDP, and 53/TCP,UDP are open"
    fi
}

# Configure SELinux (if applicable)
configure_selinux() {
    if command -v semanage >/dev/null 2>&1; then
        print_status "INFO" "Configuring SELinux..."
        
        # Allow TFTP
        semanage port -a -t tftp_port_t -p udp 69 2>/dev/null || true
        
        # Allow dnsmasq
        setsebool -P dnsmasq_disable_trans 1
        
        print_status "SUCCESS" "SELinux configured"
    else
        print_status "INFO" "SELinux not detected"
    fi
}

# Test dnsmasq configuration
test_dnsmasq_config() {
    print_status "INFO" "Testing dnsmasq configuration..."
    
    # Test configuration file syntax
    if dnsmasq --test; then
        print_status "SUCCESS" "dnsmasq configuration is valid"
    else
        print_status "ERROR" "dnsmasq configuration has errors"
        exit 1
    fi
}

# Show configuration summary
show_summary() {
    echo ""
    print_status "SUCCESS" "dnsmasq configuration completed!"
    echo ""
    echo "Configuration Summary:"
    echo "  Interface: $PXE_INTERFACE"
    echo "  PXE Server IP: $PXE_IP"
    echo "  DHCP Range: $DHCP_START - $DHCP_END"
    echo "  TFTP Root: /var/lib/tftpboot"
    echo "  PXE Boot File: pxelinux.0"
    echo ""
    echo "Services to start:"
    echo "  - dnsmasq (DHCP + TFTP)"
    echo "  - tftp.socket (TFTP server)"
    echo ""
    echo "Next steps:"
    echo "  1. Start services: ./start_services.sh"
    echo "  2. Test PXE boot: ./test_pxe.sh"
    echo ""
}

# Main execution
main() {
    echo "=== PXE TFTP Server dnsmasq Configuration ==="
    echo ""
    
    # Check root privileges
    check_root
    
    # Load network configuration
    load_network_config
    
    # Backup existing config
    backup_config
    
    # Create dnsmasq configuration
    create_dnsmasq_config
    
    # Configure firewall
    configure_firewall
    
    # Configure SELinux
    configure_selinux
    
    # Test configuration
    test_dnsmasq_config
    
    # Show summary
    show_summary
}

# Run main function
main "$@" 