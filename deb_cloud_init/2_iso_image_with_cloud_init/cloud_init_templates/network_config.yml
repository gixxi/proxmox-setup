#cloud-config
# Network Configuration Template
# This template configures dual NIC setup with WAN and NAS interfaces

# Network Configuration
# Variables to be replaced during deployment:
# {WAN_INTERFACE} - WAN interface name (e.g., "eno1")
# {NAS_INTERFACE} - NAS interface name (e.g., "eno2")
# {WAN_IP} - WAN IP address (e.g., "203.0.113.10/24")
# {NAS_IP} - NAS IP address (e.g., "192.168.1.10/24")
# {WAN_GATEWAY} - WAN gateway (e.g., "203.0.113.1")
# {NAS_GATEWAY} - NAS gateway (e.g., "192.168.1.1")
# {DNS_SERVERS} - DNS servers (e.g., "8.8.8.8,8.8.4.4")
# {NFS_SERVER} - NFS server IP (e.g., "192.168.1.100")
# {NFS_SHARE} - NFS share path (e.g., "/volume1/shared")

# Network configuration using Netplan
network:
  version: 2
  ethernets:
    {WAN_INTERFACE}:
      dhcp4: false
      addresses:
        - {WAN_IP}
      gateway4: {WAN_GATEWAY}
      nameservers:
        addresses: [{DNS_SERVERS}]
      mtu: 1500
      optional: false
    
    {NAS_INTERFACE}:
      dhcp4: false
      addresses:
        - {NAS_IP}
      mtu: 9000
      optional: false
      routes:
        - to: 192.168.1.0/24
          via: {NAS_GATEWAY}
          table: 200
      routing-policy:
        - from: 192.168.1.0/24
          table: 200

# Mount points for NFS
mounts:
  - [ "{NFS_SERVER}:{NFS_SHARE}", "/mnt/nas", "nfs", "rw,hard,intr,rsize=8192,wsize=8192,timeo=600,retrans=2", "0", "0" ]

# Run commands for network configuration
runcmd:
  # Wait for network interfaces to be available
  - |
    echo "Waiting for network interfaces..."
    for i in {1..30}; do
      if ip link show {WAN_INTERFACE} >/dev/null 2>&1 && ip link show {NAS_INTERFACE} >/dev/null 2>&1; then
        echo "Network interfaces found"
        break
      fi
      if [ $i -eq 30 ]; then
        echo "Warning: Network interfaces not found after 30 seconds"
      fi
      sleep 1
    done
  
  # Apply network configuration
  - netplan apply
  
  # Wait for network to be ready
  - sleep 5
  
  # Test network connectivity
  - |
    echo "Testing network connectivity..."
    
    # Test WAN connectivity
    if ping -c 3 -I {WAN_INTERFACE} 8.8.8.8 >/dev/null 2>&1; then
      echo "✓ WAN connectivity (8.8.8.8) successful"
    else
      echo "✗ WAN connectivity (8.8.8.8) failed"
    fi
    
    # Test NAS connectivity
    if ping -c 3 -I {NAS_INTERFACE} {NAS_GATEWAY} >/dev/null 2>&1; then
      echo "✓ NAS connectivity ({NAS_GATEWAY}) successful"
    else
      echo "✗ NAS connectivity ({NAS_GATEWAY}) failed"
    fi
    
    # Test NFS server connectivity
    if ping -c 3 {NFS_SERVER} >/dev/null 2>&1; then
      echo "✓ NFS server connectivity ({NFS_SERVER}) successful"
    else
      echo "✗ NFS server connectivity ({NFS_SERVER}) failed"
    fi
  
  # Create NFS mount directory
  - mkdir -p /mnt/nas
  
  # Test NFS mount
  - |
    echo "Testing NFS mount..."
    if mount -t nfs {NFS_SERVER}:{NFS_SHARE} /mnt/nas -o rw,hard,intr,rsize=8192,wsize=8192,timeo=600,retrans=2; then
      echo "✓ NFS mount successful"
      umount /mnt/nas
    else
      echo "✗ NFS mount failed"
    fi
  
  # Configure network optimization
  - |
    echo "Configuring network optimization..."
    
    # Optimize TCP settings
    cat >> /etc/sysctl.conf << 'EOF'
    
    # Network optimization
    net.core.rmem_max = 16777216
    net.core.wmem_max = 16777216
    net.ipv4.tcp_rmem = 4096 87380 16777216
    net.ipv4.tcp_wmem = 4096 65536 16777216
    net.ipv4.tcp_congestion_control = bbr
    net.ipv4.tcp_window_scaling = 1
    net.ipv4.tcp_timestamps = 1
    net.ipv4.tcp_sack = 1
    net.ipv4.tcp_fack = 1
    net.ipv4.tcp_fin_timeout = 30
    net.ipv4.tcp_keepalive_time = 1200
    net.ipv4.tcp_keepalive_intvl = 15
    net.ipv4.tcp_keepalive_probes = 5
    net.ipv4.ip_forward = 1
    EOF
    
    # Apply sysctl changes
    sysctl -p
  
  # Configure network monitoring
  - |
    echo "Setting up network monitoring..."
    cat > /usr/local/bin/network-health-check.sh << 'EOF'
    #!/bin/bash
    # Network health check script
    
    echo "=== Network Health Check $(date) ==="
    
    # Check interface status
    echo "Interface Status:"
    ip link show | grep -E "^[0-9]+:" | awk '{print $2, $9}'
    
    # Check IP addresses
    echo "IP Addresses:"
    ip addr show | grep -E "inet " | awk '{print $2, $7}'
    
    # Test connectivity
    echo "Connectivity Tests:"
    
    # Test WAN
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
      echo "  WAN (8.8.8.8): OK"
    else
      echo "  WAN (8.8.8.8): FAILED"
    fi
    
    # Test NAS gateway
    if ping -c 1 -W 5 {NAS_GATEWAY} >/dev/null 2>&1; then
      echo "  NAS Gateway ({NAS_GATEWAY}): OK"
    else
      echo "  NAS Gateway ({NAS_GATEWAY}): FAILED"
    fi
    
    # Test NFS server
    if ping -c 1 -W 5 {NFS_SERVER} >/dev/null 2>&1; then
      echo "  NFS Server ({NFS_SERVER}): OK"
    else
      echo "  NFS Server ({NFS_SERVER}): FAILED"
    fi
    
    # Check NFS mount
    if mountpoint -q /mnt/nas; then
      echo "  NFS Mount (/mnt/nas): OK"
    else
      echo "  NFS Mount (/mnt/nas): NOT MOUNTED"
    fi
    
    # Check interface speeds
    echo "Interface Speeds:"
    for iface in {WAN_INTERFACE} {NAS_INTERFACE}; do
      if command -v ethtool >/dev/null 2>&1; then
        speed=$(ethtool "$iface" 2>/dev/null | grep Speed | awk '{print $2}')
        echo "  $iface: $speed"
      fi
    done
    EOF
    
    chmod +x /usr/local/bin/network-health-check.sh
    
    # Add to crontab
    echo "*/5 * * * * root /usr/local/bin/network-health-check.sh >> /var/log/network-health.log 2>&1" >> /etc/cron.d/network-monitoring
  
  # Configure log rotation for network logs
  - |
    echo "Configuring network log rotation"
    cat > /etc/logrotate.d/network << 'EOF'
    /var/log/network-health.log {
        daily
        missingok
        rotate 30
        compress
        delaycompress
        notifempty
        create 644 root root
    }
    EOF
  
  # Set up network troubleshooting tools
  - |
    echo "Installing network troubleshooting tools..."
    apt-get install -y iperf3 net-tools traceroute mtr || echo "Some tools not available"
  
  # Configure network performance monitoring
  - |
    echo "Setting up network performance monitoring..."
    cat > /usr/local/bin/network-performance-test.sh << 'EOF'
    #!/bin/bash
    # Network performance test script
    
    echo "=== Network Performance Test $(date) ==="
    
    # Test bandwidth to NFS server
    if command -v iperf3 >/dev/null 2>&1; then
      echo "Testing bandwidth to NFS server ({NFS_SERVER}):"
      timeout 30 iperf3 -c {NFS_SERVER} -t 10 -J 2>/dev/null | jq -r '.end.sum_received.bits_per_second' | awk '{print "  Bandwidth: " $1/1000000 " Mbps"}'
    fi
    
    # Test latency
    echo "Testing latency:"
    ping -c 5 {NFS_SERVER} | tail -1 | awk '{print "  Average latency: " $4}'
    EOF
    
    chmod +x /usr/local/bin/network-performance-test.sh
  
  # Final network configuration message
  - echo "Network configuration completed successfully"
  - echo "WAN Interface: {WAN_INTERFACE} ({WAN_IP})"
  - echo "NAS Interface: {NAS_INTERFACE} ({NAS_IP})"
  - echo "NFS Mount: {NFS_SERVER}:{NFS_SHARE} -> /mnt/nas"
  - echo "Gateway: {WAN_GATEWAY}"
  - echo "DNS: {DNS_SERVERS}" 